{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _sourceMap = _interopRequireDefault(require(\"source-map\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString();\n  } else {\n    return window.atob(str);\n  }\n}\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' })\n * root.input.map //=> PreviousMap\n */\n\n\nvar PreviousMap = /*#__PURE__*/function () {\n  /**\n   * @param {string}         css    Input CSS source.\n   * @param {processOptions} [opts] {@link Processor#process} options.\n   */\n  function PreviousMap(css, opts) {\n    this.loadAnnotation(css);\n    /**\n     * Was source map inlined by data-uri to input CSS.\n     *\n     * @type {boolean}\n     */\n\n    this.inline = this.startWith(this.annotation, 'data:');\n    var prev = opts.map ? opts.map.prev : undefined;\n    var text = this.loadMap(opts.from, prev);\n    if (text) this.text = text;\n  }\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} Object with source map information.\n   */\n\n\n  var _proto = PreviousMap.prototype;\n\n  _proto.consumer = function consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new _sourceMap.default.SourceMapConsumer(this.text);\n    }\n\n    return this.consumerCache;\n  }\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present.\n   */\n  ;\n\n  _proto.withContent = function withContent() {\n    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n  };\n\n  _proto.startWith = function startWith(string, start) {\n    if (!string) return false;\n    return string.substr(0, start.length) === start;\n  };\n\n  _proto.getAnnotationURL = function getAnnotationURL(sourceMapString) {\n    return sourceMapString.match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1].trim();\n  };\n\n  _proto.loadAnnotation = function loadAnnotation(css) {\n    var annotations = css.match(/\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm);\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      var lastAnnotation = annotations[annotations.length - 1];\n\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation);\n      }\n    }\n  };\n\n  _proto.decodeInline = function decodeInline(text) {\n    var baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/;\n    var baseUri = /^data:application\\/json;base64,/;\n    var uri = 'data:application/json,';\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length));\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length));\n    }\n\n    var encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n    throw new Error('Unsupported source map encoding ' + encoding);\n  };\n\n  _proto.loadMap = function loadMap(file, prev) {\n    if (prev === false) return false;\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev;\n      } else if (typeof prev === 'function') {\n        var prevPath = prev(file);\n\n        if (prevPath && _fs.default.existsSync && _fs.default.existsSync(prevPath)) {\n          return _fs.default.readFileSync(prevPath, 'utf-8').toString().trim();\n        } else {\n          throw new Error('Unable to load previous source map: ' + prevPath.toString());\n        }\n      } else if (prev instanceof _sourceMap.default.SourceMapConsumer) {\n        return _sourceMap.default.SourceMapGenerator.fromSourceMap(prev).toString();\n      } else if (prev instanceof _sourceMap.default.SourceMapGenerator) {\n        return prev.toString();\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev);\n      } else {\n        throw new Error('Unsupported previous source map format: ' + prev.toString());\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation);\n    } else if (this.annotation) {\n      var map = this.annotation;\n      if (file) map = _path.default.join(_path.default.dirname(file), map);\n      this.root = _path.default.dirname(map);\n\n      if (_fs.default.existsSync && _fs.default.existsSync(map)) {\n        return _fs.default.readFileSync(map, 'utf-8').toString().trim();\n      } else {\n        return false;\n      }\n    }\n  };\n\n  _proto.isMap = function isMap(map) {\n    if (typeof map !== 'object') return false;\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string';\n  };\n\n  return PreviousMap;\n}();\n\nvar _default = PreviousMap;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":"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","names":["fromBase64","str","Buffer","from","toString","window","atob","PreviousMap","css","opts","loadAnnotation","inline","startWith","annotation","prev","map","undefined","text","loadMap","consumer","consumerCache","mozilla","SourceMapConsumer","withContent","sourcesContent","length","string","start","substr","getAnnotationURL","sourceMapString","match","trim","annotations","lastAnnotation","decodeInline","baseCharsetUri","baseUri","uri","decodeURIComponent","test","RegExp","lastMatch","encoding","Error","file","prevPath","fs","existsSync","readFileSync","SourceMapGenerator","fromSourceMap","isMap","JSON","stringify","path","join","dirname","root","mappings","_mappings"],"sources":["previous-map.es6"],"sourcesContent":["import mozilla from 'source-map'\nimport path from 'path'\nimport fs from 'fs'\n\nfunction fromBase64 (str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    return window.atob(str)\n  }\n}\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' })\n * root.input.map //=> PreviousMap\n */\nclass PreviousMap {\n  /**\n   * @param {string}         css    Input CSS source.\n   * @param {processOptions} [opts] {@link Processor#process} options.\n   */\n  constructor (css, opts) {\n    this.loadAnnotation(css)\n    /**\n     * Was source map inlined by data-uri to input CSS.\n     *\n     * @type {boolean}\n     */\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (text) this.text = text\n  }\n\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} Object with source map information.\n   */\n  consumer () {\n    if (!this.consumerCache) {\n      this.consumerCache = new mozilla.SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present.\n   */\n  withContent () {\n    return !!(this.consumer().sourcesContent &&\n              this.consumer().sourcesContent.length > 0)\n  }\n\n  startWith (string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL (sourceMapString) {\n    return sourceMapString\n      .match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1]\n      .trim()\n  }\n\n  loadAnnotation (css) {\n    let annotations = css.match(\n      /\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm\n    )\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      let lastAnnotation = annotations[annotations.length - 1]\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation)\n      }\n    }\n  }\n\n  decodeInline (text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let uri = 'data:application/json,'\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadMap (file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath && fs.existsSync && fs.existsSync(prevPath)) {\n          return fs.readFileSync(prevPath, 'utf-8').toString().trim()\n        } else {\n          throw new Error(\n            'Unable to load previous source map: ' + prevPath.toString())\n        }\n      } else if (prev instanceof mozilla.SourceMapConsumer) {\n        return mozilla.SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof mozilla.SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString())\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = path.join(path.dirname(file), map)\n\n      this.root = path.dirname(map)\n      if (fs.existsSync && fs.existsSync(map)) {\n        return fs.readFileSync(map, 'utf-8').toString().trim()\n      } else {\n        return false\n      }\n    }\n  }\n\n  isMap (map) {\n    if (typeof map !== 'object') return false\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string'\n  }\n}\n\nexport default PreviousMap\n"]},"metadata":{},"sourceType":"script"}