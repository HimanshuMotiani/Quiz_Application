{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/AltCampusRepository/react/Quiz_Application/src/Components/QuizDash.js\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport Quiz from \"./Quiz\";\nimport Result from './Result';\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass QuizDash extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = () => {\n      if (!this.state.answers[9]) {\n        alert(`You must select answer of question`);\n      } else {\n        this.setState(prevState => {\n          return {\n            isSubmitted: !prevState.isSubmitted\n          };\n        });\n      }\n    };\n\n    this.handleAnswer = (ans, currentQuestion) => {\n      if (!this.state.answers[currentQuestion]) {\n        this.setState(prevState => {\n          let updatedAnswer = _.concat(prevState.answers, ans);\n\n          return {\n            answers: updatedAnswer\n          };\n        });\n      }\n    };\n\n    this.state = {\n      questions: null,\n      answers: [],\n      isSubmitted: false\n    };\n  }\n\n  componentDidMount() {\n    let category = this.props.match.params.category;\n    let level = this.props.match.params.level;\n    fetch(`https://opentdb.com/api.php?amount=10&category=${category}&difficulty=${level}`).then(res => res.json()).then(data => this.setState({\n      questions: data.results\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.questions && !this.state.isSubmitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background h-screen\",\n        children: /*#__PURE__*/_jsxDEV(Quiz, {\n          questions: this.state.questions,\n          handleAnswer: this.handleAnswer,\n          answers: this.state.answers,\n          handleSubmit: this.handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : \"\", this.state.isSubmitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background h-screen\",\n        children: /*#__PURE__*/_jsxDEV(Result, {\n          answers: this.state.answers,\n          questions: this.state.questions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this) : \"\"]\n    }, void 0, true);\n  }\n\n}\n\nexport default QuizDash;","map":{"version":3,"sources":["/Users/apple/Documents/AltCampusRepository/react/Quiz_Application/src/Components/QuizDash.js"],"names":["React","NavLink","Quiz","Result","_","QuizDash","Component","constructor","handleSubmit","state","answers","alert","setState","prevState","isSubmitted","handleAnswer","ans","currentQuestion","updatedAnswer","concat","questions","componentDidMount","category","props","match","params","level","fetch","then","res","json","data","results","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;;;;AACA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAkBdC,YAlBc,GAkBC,MAAM;AACnB,UAAI,CAAC,KAAKC,KAAL,CAAWC,OAAX,CAAmB,CAAnB,CAAL,EAA4B;AAC1BC,QAAAA,KAAK,CAAE,oCAAF,CAAL;AACD,OAFD,MAEO;AACL,aAAKC,QAAL,CAAeC,SAAD,IAAe;AAC3B,iBAAO;AACLC,YAAAA,WAAW,EAAE,CAACD,SAAS,CAACC;AADnB,WAAP;AAGD,SAJD;AAKD;AACF,KA5Ba;;AAAA,SA8BdC,YA9Bc,GA8BC,CAACC,GAAD,EAAMC,eAAN,KAA0B;AACvC,UAAI,CAAC,KAAKR,KAAL,CAAWC,OAAX,CAAmBO,eAAnB,CAAL,EAA0C;AACxC,aAAKL,QAAL,CAAeC,SAAD,IAAe;AAC3B,cAAIK,aAAa,GAAGd,CAAC,CAACe,MAAF,CAASN,SAAS,CAACH,OAAnB,EAA4BM,GAA5B,CAApB;;AACA,iBAAO;AACLN,YAAAA,OAAO,EAAEQ;AADJ,WAAP;AAGD,SALD;AAMD;AACF,KAvCa;;AAEZ,SAAKT,KAAL,GAAa;AACXW,MAAAA,SAAS,EAAE,IADA;AAEXV,MAAAA,OAAO,EAAE,EAFE;AAGXI,MAAAA,WAAW,EAAE;AAHF,KAAb;AAKD;;AACDO,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,QAAvC;AACA,QAAII,KAAK,GAAG,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,KAApC;AACAC,IAAAA,KAAK,CACF,kDAAiDL,QAAS,eAAcI,KAAM,EAD5E,CAAL,CAGGE,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISG,IAAD,IAAU,KAAKnB,QAAL,CAAc;AAAEQ,MAAAA,SAAS,EAAEW,IAAI,CAACC;AAAlB,KAAd,CAJlB;AAKD;;AAyBDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,iBACG,KAAKxB,KAAL,CAAWW,SAAX,IAAwB,CAAC,KAAKX,KAAL,CAAWK,WAApC,gBACC;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,SAAS,EAAE,KAAKL,KAAL,CAAWW,SADxB;AAEE,UAAA,YAAY,EAAE,KAAKL,YAFrB;AAGE,UAAA,OAAO,EAAE,KAAKN,KAAL,CAAWC,OAHtB;AAIE,UAAA,YAAY,EAAE,KAAKF;AAJrB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADD,GAUC,EAXJ,EAaG,KAAKC,KAAL,CAAWK,WAAX,gBACC;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACA,QAAC,MAAD;AACE,UAAA,OAAO,EAAE,KAAKL,KAAL,CAAWC,OADtB;AAEE,UAAA,SAAS,EAAE,KAAKD,KAAL,CAAWW;AAFxB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADD,GAQC,EArBJ;AAAA,oBADF;AA0BD;;AArEoC;;AAwEvC,eAAef,QAAf","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport Quiz from \"./Quiz\";\nimport Result from './Result'\nimport _ from \"lodash\";\nclass QuizDash extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: null,\n      answers: [],\n      isSubmitted: false,\n    };\n  }\n  componentDidMount() {\n    let category = this.props.match.params.category;\n    let level = this.props.match.params.level;\n    fetch(\n      `https://opentdb.com/api.php?amount=10&category=${category}&difficulty=${level}`\n    )\n      .then((res) => res.json())\n      .then((data) => this.setState({ questions: data.results }));\n  }\n\n  handleSubmit = () => {\n    if (!this.state.answers[9]) {\n      alert(`You must select answer of question`);\n    } else {\n      this.setState((prevState) => {\n        return {\n          isSubmitted: !prevState.isSubmitted,\n        };\n      });\n    }\n  };\n\n  handleAnswer = (ans, currentQuestion) => {\n    if (!this.state.answers[currentQuestion]) {\n      this.setState((prevState) => {\n        let updatedAnswer = _.concat(prevState.answers, ans);\n        return {\n          answers: updatedAnswer,\n        };\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        {this.state.questions && !this.state.isSubmitted ?(\n          <div className=\"background h-screen\">\n            <Quiz\n              questions={this.state.questions}\n              handleAnswer={this.handleAnswer}\n              answers={this.state.answers}\n              handleSubmit={this.handleSubmit}\n            />\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.isSubmitted ? (\n          <div className=\"background h-screen\">\n          <Result\n            answers={this.state.answers}\n            questions={this.state.questions}\n          />\n          </div>\n        ) : (\n          \"\"\n        )}\n      </>\n    );\n  }\n}\n\nexport default QuizDash;\n"]},"metadata":{},"sourceType":"module"}